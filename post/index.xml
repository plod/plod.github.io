<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on plod.tv</title>
    <link>https://plod.tv/post/index.xml</link>
    <description>Recent content in Posts on plod.tv</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 24 Nov 2016 09:35:52 +0000</lastBuildDate>
    <atom:link href="https://plod.tv/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Year of the runs </title>
      <link>https://plod.tv/post/year-of-the-runs/</link>
      <pubDate>Thu, 24 Nov 2016 09:35:52 +0000</pubDate>
      
      <guid>https://plod.tv/post/year-of-the-runs/</guid>
      <description>

&lt;h3 id=&#34;2017-will-be-the-year-of-the-runs-for-me&#34;&gt;2017 will be the year of the runs üèÉüí© for me&lt;/h3&gt;

&lt;p&gt;What does that mean?&lt;/p&gt;

&lt;blockquote&gt;&lt;dfn&gt;Run&lt;/dfn&gt;...&lt;ol start=&#34;5&#34;&gt;&lt;li&gt;To extend or persist, statically or dynamically, through space or time.&lt;/li&gt;&lt;ol start=&#34;2&#34;&gt;&lt;li&gt;(intransitive) To extend in time, to last, to continue (usually with a measure phrase).&lt;/li&gt;&lt;ul&gt;&lt;li&gt;The sale will run for ten days.‚ÄÉ The contract runs through 2008.‚ÄÉ The meeting ran late.‚ÄÉ The book runs 655 pages.‚ÄÉ The speech runs as follows: ‚Ä¶‚Äé&lt;/li&gt;&lt;/ul&gt;&lt;/ol&gt;&lt;/ol&gt;... &lt;a href=&#34;https://en.wiktionary.org/wiki/run&#34; target=&#34;_blank&#34;&gt;https://en.wiktionary.org/wiki/run&lt;/a&gt;&lt;/blockquote&gt;

&lt;p&gt;I am going to run at least 1 mile (though often more than that) every day for 2017. I am not going to have just a run of runs I am hoping to:&lt;ol&gt;
&lt;li&gt;Run at least a mile&lt;/li&gt;
&lt;li&gt;Cycle at least three miles&lt;/li&gt;
&lt;li&gt;Continue my Duolingo Welsh streak: &lt;sub&gt;&lt;a href=&#34;https://www.duolingo.com/plodtv&#34;&gt;https://www.duolingo.com/plodtv&lt;/a&gt;&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;Continue my Free Code Camp streak: &lt;sub&gt;&lt;a href=&#34;https://www.freecodecamp.com/plod&#34;&gt;https://www.freecodecamp.com/plod&lt;/a&gt;&lt;/sub&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;I will/have started some of these runs (streaks) before 2017 but the important pledge is that from the 1&lt;sup&gt;st&lt;/sup&gt; of January = until the 31&lt;sup&gt;st&lt;/sup&gt; of December I will have an unbroken run of these things.&lt;/p&gt;

&lt;p&gt;This is going to be very difficult to juggle. I think the cycling part maybe the bit that falls hardest by the wayside. To combat this I have signed up for the Audax uk Mileater Award for the year &lt;a href=&#34;http://www.aukweb.net/results/mileater/&#34;&gt;http://www.aukweb.net/results/mileater/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://plod.tv/img/post-img/mileater-diary.jpg&#34; alt=&#34;Mileater Diary&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I am going to use this to record my mileage for both running and cycling.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://plod.tv/img/post-img/mileater-diary-inside.jpg&#34; alt=&#34;Mileater Diary Inside&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We have also sorted out a strava club for those who are doing just the running part of this challenge: &lt;a href=&#34;https://www.strava.com/clubs/yearoftheruns&#34;&gt;https://www.strava.com/clubs/yearoftheruns&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am also hoping to get my favourite instagram picture of the weeks activitys printed and inserted into the diary. This is a new challenge for me, and it will be a challenge to complete next year. Here&amp;rsquo;s to challenging ourselves üç∫.&lt;/p&gt;

&lt;p&gt;And now I&amp;rsquo;ve tweeted it in the public domain I&amp;rsquo;m tied to doing it.&lt;/p&gt;

&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;und&#34; dir=&#34;ltr&#34;&gt;2017 &lt;a href=&#34;https://twitter.com/hashtag/yearoftheruns?src=hash&#34;&gt;#yearoftheruns&lt;/a&gt; &lt;a href=&#34;https://t.co/i006F0gPSm&#34;&gt;https://t.co/i006F0gPSm&lt;/a&gt;&lt;/p&gt;&amp;mdash; DTM (@plodtv) &lt;a href=&#34;https://twitter.com/plodtv/status/801856463614476293&#34;&gt;November 24, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Ultimate Go</title>
      <link>https://plod.tv/post/ultimate-go/</link>
      <pubDate>Mon, 27 Jun 2016 12:27:58 +0100</pubDate>
      
      <guid>https://plod.tv/post/ultimate-go/</guid>
      <description>

&lt;h2 id=&#34;ultimate-go&#34;&gt;Ultimate Go&lt;/h2&gt;

&lt;p&gt;Earlier this month I attended &lt;a href=&#34;https://www.ardanlabs.com/&#34;&gt;Ardan Labs&lt;/a&gt; Ultimate Go Training given by Bill Kennedy (&lt;a href=&#34;https://www.goinggo.net/&#34;&gt;https://www.goinggo.net/&lt;/a&gt;). Todd McLeod of the Udemy course &lt;a href=&#34;https://www.udemy.com/learn-how-to-code/&#34;&gt;https://www.udemy.com/learn-how-to-code/&lt;/a&gt; had recommended it, and as I had been working my way through Bill&amp;rsquo;s book &lt;a href=&#34;https://www.manning.com/books/go-in-action&#34;&gt;Go in Action&lt;/a&gt; I was very keen to take my Go to the next level.&lt;/p&gt;

&lt;p&gt;The course was hosted at &lt;a href=&#34;https://www.hailoapp.com/&#34;&gt;Hailo&lt;/a&gt;&amp;rsquo;s HQ in central London. Big shout out to them for hosting it, and for the excellent facilities! I took the whole family up to Cambridge to stay with friends, and then commuted into central London each day for the course.&lt;/p&gt;

&lt;p&gt;Bill is a very passionate guy and I think he could get motivate excitement in computer programming and advanced concepts in anybody. I learnt a lot of things that I&amp;rsquo;d not put much thought into, and some anti patterns that I thought I&amp;rsquo;d been doing to improve things but had essentially been slowing things down. You can get a background idea about the course from it&amp;rsquo;s &lt;a href=&#34;https://github.com/ardanlabs/gotraining/tree/master/courses/ultimate&#34;&gt;github&lt;/a&gt;, or it is worth listening to this weeks &lt;a href=&#34;https://changelog.com/gotime-6/&#34;&gt;Go Time&lt;/a&gt; podcast where you can hear Bill talk about a few of the topics of the course.&lt;/p&gt;

&lt;p&gt;I thoroughly reccomend anybody no matter what level you are at to give the training a go (pardon the pun) Bill seems to be everywhere all the time, so I&amp;rsquo;m sure you can fit it in somewhere! Oh and he signed my Go in Action book üòÅ!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project Euler</title>
      <link>https://plod.tv/post/project-euler/</link>
      <pubDate>Fri, 11 Mar 2016 10:36:46 +0000</pubDate>
      
      <guid>https://plod.tv/post/project-euler/</guid>
      <description>&lt;p&gt;So I decided to do the projects on Project Euler to help with my Go learning (and to get my maths head working again), I&amp;rsquo;d forgotten how much fun the problems were.&lt;/p&gt;

&lt;p&gt;What is Project Euler?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Project Euler is a series of challenging mathematical/computer programming problems that will require more than just mathematical insights to solve. Although mathematics will help you arrive at elegant and efficient methods, the use of a computer and programming skills will be required to solve most problems.&lt;/p&gt;

&lt;p&gt;The motivation for starting Project Euler, and its continuation, is to provide a platform for the inquiring mind to delve into unfamiliar areas and learn new concepts in a fun and recreational context.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Check them out here: &lt;a href=&#34;https://projecteuler.net/&#34;&gt;https://projecteuler.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve decided to push my solutions to github here: &lt;a href=&#34;https://github.com/plod/projectEuler/&#34;&gt;https://github.com/plod/projectEuler/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://projecteuler.net/profile/plod.png&#34; alt=&#34;Euler Profile Picture&#34; title=&#34;plod&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Project Euler says on each solution:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We hope that you enjoyed solving this problem. Please do not deprive others of going through the same process by publishing your solution outside Project Euler. If you want to share your insights then please go to thread 8 in the discussion forum.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I really hope that people do not see this as deprivation or use the results to spoil their critical thought process.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Announcing goSwitchBackup</title>
      <link>https://plod.tv/post/announcing-goSwitchBackup/</link>
      <pubDate>Mon, 22 Feb 2016 16:19:11 +0000</pubDate>
      
      <guid>https://plod.tv/post/announcing-goSwitchBackup/</guid>
      <description>

&lt;p&gt;goSwitchBackup is Go program I wrote, to automate the backing up of Cisco switches over SSH for the network boys in work. It essentially SSHs (can you use it like a verb like that?) into an IP (Which should be the address of a Cisco switch) using the password, once it receives the prompt character it trys to escalate privileges using: enable Once it sees the &amp;ldquo;#&amp;rdquo; character it then tries to run the backup command: copy running-config tftpIt will then give the TFTP server address used when the program was invoked, and name the file:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;switchBackup-IP-OF-SWITCH-RFC3339timestamp&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(&lt;em&gt;I may make this configurable later&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;You can check out the code on github here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/plod/goSwitchBackup&#34;&gt;https://github.com/plod/goSwitchBackup&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you run or compile, or just go run the code, pass the -help command for helps with flags.&lt;/p&gt;

&lt;p&gt;Any comments or requests for more information please post in the comments below (I am still quite new to Go so any helpful pointers would also be gratefully received).&lt;/p&gt;

&lt;h3 id=&#34;todo-wishlist&#34;&gt;todo/wishlist:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Add potential TFTP server inside the program itself&lt;/li&gt;
&lt;li&gt;compare previous backup with current backup and send alert of changes (SMTP)&lt;/li&gt;
&lt;li&gt;Add a verbose switch to echo some of the commented stuff that helps debug issues&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Audax: Malmesbury Mash 2016</title>
      <link>https://plod.tv/post/malmesbury-mash-2016/</link>
      <pubDate>Mon, 22 Feb 2016 08:43:55 +0000</pubDate>
      
      <guid>https://plod.tv/post/malmesbury-mash-2016/</guid>
      <description>&lt;p&gt;On Saturday gone, I rode my 200km Audax of the month of February &amp;ldquo;Malmesbury Mash&amp;rdquo;. I try to ride at least a 200km every month of the year to achieve the Audax UK award &lt;a href=&#34;http://www.aukweb.net/results/other/rrtyclaim/&#34;&gt;Randonneur Round the Year&lt;/a&gt;. Last year on my 12th successive month on the ride to claim this award, I managed to break my collar bone, but that&amp;rsquo;s another story entirely.&lt;/p&gt;

&lt;p&gt;Things did not start well for the preparation for this ride. On the Friday night I was head coach for the tri club, but felt very very ill, and almost passed out. I spent most of that evening in bed waking up to use the toilet every few hours and drink water, until eventually I was violently sick. I then started to feel better, and foolishly decided to ride the Audax.  This was to be my friend&amp;rsquo;s first introduction to Audax that had been arranged for months, although had I not been 4 months into an RRTY I probably would have been less foolish.&lt;/p&gt;

&lt;p&gt;I woke up at 5:30am feeling pretty good considering but I had a lot of preparation work to do, that couldn&amp;rsquo;t have been done because of me being in bed sick. I always get a little anxious about leaving preparation last minute, but I think this anxiety keeps me in check (I didn&amp;rsquo;t forget anything). I got to the start (Toby Carvery Cardiff Gate) with 15 minutes to spare. Which was enough time to get my gear on, get the brevet cards, and sort my bike out.&lt;/p&gt;

&lt;p&gt;This was to be an introduction ride to Audax for a group of my friends, we call ourselves the &amp;ldquo;Muddy Sand Rats&amp;rdquo;. It all stemmed from when we entered a team into a mountain biking competition in 2010 and we needed a team name. There&amp;rsquo;s myself, Anthony (A very keen MTBer that hates road cycling), Alex (A keen MTBer plagued by a few injury crashes gaining fitness through Roadying) and Ben (A bit of a fitness fanatic that has a penchent for breaking himself). As it turned out Ben injured himself in the week leading up to things.&lt;/p&gt;

&lt;p&gt;Just as the start time rolled, all my normal Audax compatriots rolled off while we waited for Ant to faff around for 15 minutes, and then we were off. Recently we&amp;rsquo;ve discovered some lovely tarmac to take us out of Newport towards Chepstow which is flatter than the usually prescribed A48 routes or more direct than towards Lliswerry &amp;amp; the coast. We were in a little group with two other Audaxers (I didn&amp;rsquo;t catch their names) the gentleman in the group was wearing an Audax England jersey and the lady a Rapha coat, anyhow I told them about our alternative route, and they decided they&amp;rsquo;d like to follow us. This boded well until I held back for my friends and the other two went off into the distance missing the junction into Magor. We arrived at the first control in plenty of time, and despite the expected background moaning about roadying from Ant everyone seemed to be enjoying themselves.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://plod.tv/img/post-img/mm2016-1.jpg&#34; alt=&#34;Severn Bridge Photo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The next control was going to be halfway but not before going over the bridge which I think saw Anthony really throw caution to the wind because he started take some photographs. From here to Malmesbury I would say was the highlight of the journey for all of us. We stopped to control and to refuel at &amp;ldquo;Amanda&amp;rsquo;s&amp;rdquo; where Alex and I tucked into the vegetarian bake (it was delicious) and Anthony had sausage egg and chips. While we arrived the other two Audaxers, that had took a wrong turning earlier, turned up and my worries were averted.&lt;/p&gt;

&lt;p&gt;It was always going to be tough heading back to Wales with the headwind, but I don&amp;rsquo;t think any of us were prepared for how bad. Within about an hour on the next leg to Shephards patch, it became clear that we were going to be hard pushed to get back in to Arrivee in time for validation. Alex made it quite clear that he would stick with Ant and that I could push on to get the ride for my RRTY. After making sure he would be okay with navigation, I caught on a tandem&amp;rsquo;s wheel and got a bit of shelter from the wind (though they pulled over before I could return the favour). I then solod it a bit to make up some time in hand to Shephards patch. I arrived and bounced it very quickly as I was concerned whether I could even finish in time.&lt;/p&gt;

&lt;p&gt;The next leg back to Chepstow I found a little bit more difficult than I expected the wind was howling in, but now I felt like none of the food I&amp;rsquo;d eaten at lunch would digest and in fact that I needed to be sick. In times of suffering like this I tend to meditate through counting in numbers, which I did a bit, but I knew that I would need to do that a lot more later. I managed to get about 10 minutes on the Cardiff Byways train, but I was clearly out of sorts because I could barely hold any turn of speed. I&amp;rsquo;d heard a strange noise coming from my rear mudguard and had just assumed it was some debris caught up in there. Around a pub called the Salutation Inn I noticed one of the struts holding the mudguard had detached and that the mudguard was rubbing against the tyre. Fiddlesticks! I just hoped that it would not wear through the tyre before making it to the end.&lt;/p&gt;

&lt;p&gt;The wind was getting very tough as I approached the Severn Bridge for the second time, considering I had been over in December in high winds on a Tandem I thought I was prepared for the worst! How wrong I was, I almost got blown over the railings! I got off and pushed until the road offered enough protection from the wind (though I almost lost my sunglasses during the process (I know!!! Why did I have them?!)) With a lot of shouldering and leaning into the wind, while gripping with a lot of might I made it to the other side. There I noticed that they were stopping motorbikes from using the bridge!&lt;/p&gt;

&lt;p&gt;At the control in Chepstow (Petrol Station) I had a brief chat with a chap who was looking to do a 600 this season who was from Bridgend originally. I really like these small exchanges I have with strangers who over the course of a period of Audaxes flesh out into quite some anecdotes. This was again a quick stop for me (and for everyone else I saw there for that matter). It was from this point forward that I completely meditated in numbers for my suffering and Type II &amp;ldquo;Fun&amp;rdquo; I can recollect the whole of this last 47ish kilometres but mostly with numbers counting down in my head.&lt;/p&gt;

&lt;p&gt;The only things of note were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I seemed to be getting beeped at a lot. I think I worked out that my dynamo rear light is not working (another thing with the mudguard to sort).&lt;/li&gt;
&lt;li&gt;My front dynamo lamp needs tightening keeps slipping and pointing downwards&lt;/li&gt;
&lt;li&gt;Didn&amp;rsquo;t notice that Bridge Road was waterlogged till the last minute&lt;/li&gt;
&lt;li&gt;I was sick a lot (I really should have stayed at home) vomiting while cycling is very dangerous&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I got back to Arrivee with about 30 or so minutes to spare. I caught up with one of my Audax best mates Guto &amp;amp; family, and a few people I&amp;rsquo;d met along the way, and checked on endomondo how my two friends were doing (they eventually arrived 90 minutes out of time).&lt;/p&gt;

&lt;iframe style=&#34;max-width: 100%;&#34; height=&#39;405&#39; width=&#39;590&#39; frameborder=&#39;0&#39; allowtransparency=&#39;true&#39; scrolling=&#39;no&#39; src=&#39;https://www.strava.com/activities/498098863/embed/6848c2f43a5db1a22825b0d7574c9e9c0540777e&#39;&gt;&lt;/iframe&gt;
 

&lt;p&gt;&lt;sup&gt;&lt;sub&gt;I then spent all of that night and Sunday sick as a dog &amp;amp; unable to do the running on the plan &amp;ldquo;that&amp;rsquo;ll learn me!&amp;rdquo;&lt;/sub&gt;&lt;/sup&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multiple site free ssl with http2 nginx</title>
      <link>https://plod.tv/post/multiple-site-free-ssl-http2-nginx/</link>
      <pubDate>Fri, 19 Feb 2016 14:40:27 +0000</pubDate>
      
      <guid>https://plod.tv/post/multiple-site-free-ssl-http2-nginx/</guid>
      <description>

&lt;p&gt;There still exists this myth that you require a single IP address per vhost for an ssl certificate. It was perpetuated because the encryption handshake used to happen before the resource required could be ascertained, thanks to some pretty serious security vulnerabilites SSL itself is pretty much a dead duck and the modern TLS has superceded it. One of the great things about TLS is SNI:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Server Name Indication (SNI) is an extension to the TLS computer networking protocol[1] by which a client indicates which hostname it is attempting to connect to at the start of the handshaking process. This allows a server to present multiple certificates on the same IP address and TCP port number and hence allows multiple secure (HTTPS) websites (or any other Service over TLS) to be served off the same IP address without requiring all those sites to use the same certificate. It is the conceptual equivalent to HTTP/1.1 name-based virtual hosting, but for HTTPS. &lt;a href=&#34;https://en.wikipedia.org/wiki/Server_Name_Indication&#34;&gt;more here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although in this example we are going to use one certificate across multiple vhosts.&lt;/p&gt;

&lt;h2 id=&#34;but-secure-websites-require-buying-a-certificate-which-is-expensive&#34;&gt;But secure websites require buying a certificate which is expensive!&lt;/h2&gt;

&lt;p&gt;Haven&amp;rsquo;t you heard of &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt; yet?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Let‚Äôs Encrypt is a new Certificate Authority:
It‚Äôs free, automated, and open.
In Public Beta&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;so-what-s-http2&#34;&gt;So what&amp;rsquo;s http2?&lt;/h2&gt;

&lt;p&gt;You may have already heard of the magic google did with SPDY well that and even more features are being rolled into HTTP2, and you can have your website future proofed and supporting these features right now.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HTTP/2 (originally named HTTP/2.0) is the second major version of the HTTP network protocol used by the World Wide Web. It is based on SPDY. HTTP/2 was developed by the Hypertext Transfer Protocol working group (httpbis, where bis means &amp;ldquo;repeat&amp;rdquo; or &amp;ldquo;twice&amp;rdquo;) of the Internet Engineering Task Force. &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP/2&#34;&gt;More Here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;let-s-do-this&#34;&gt;Let&amp;rsquo;s do this!&lt;/h2&gt;

&lt;p&gt;Okay for the purpose of this post, I will show you how to get sorted with ubuntu (15.04). It is relatively straight forward to do the same for other distrubutions following the links provided. But if you are having difficulty please write your questions in the comments below.&lt;/p&gt;

&lt;p&gt;At the time of writing the stable version in the nginx repositories is not a high enough version for http2 (It became available in &lt;a href=&#34;https://www.nginx.com/blog/nginx-1-9-5/&#34;&gt;version 1.9.5&lt;/a&gt;), so you need to add the mainline repositories to your apt (though depending on when you are reading this that could have changed).&lt;/p&gt;

&lt;p&gt;Instructions for adding the repositories can be found &lt;a href=&#34;http://nginx.org/en/linux_packages.html#mainline&#34;&gt;here&lt;/a&gt;. But I&amp;rsquo;ll include them for the sake of brevity.&lt;/p&gt;


wget -q http://nginx.org/keys/nginx_signing.key -O- | sudo apt-key add -


&lt;p&gt;Then add the following to /etc/apt/sources.list.d/nginx.list:&lt;/p&gt;


deb http://nginx.org/packages/mainline/ubuntu/ codename nginx
deb-src http://nginx.org/packages/mainline/ubuntu/ codename nginx


&lt;p&gt;Where codename should be your release codename, wily in my case. Then to install:&lt;/p&gt;


apt-get update
apt-get install nginx


&lt;p&gt;Okay after doing its thing you should now have nginx at a new enough version for http2.&lt;/p&gt;

&lt;h1 id=&#34;now-for-a-free-signed-cert&#34;&gt;Now for a free signed cert.&lt;/h1&gt;

&lt;p&gt;I followed &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-14-04&#34;&gt;this&lt;/a&gt; tutorial from digital ocean (great tutorials) to get the certificate up and running with the following extra bits.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure you have all the vhosts you want to host with nginx (you won&amp;rsquo;t create a certificate for every domain there really is no need, you can reuse the one)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When you are creating seperate vhost configs in nginx (doing this is a bit beyond the scope of this article but if you need help comment below), add the following directive to the vhost (to point the letsencrypt requests back to the default sites):&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


 location /.well-known/ {
        alias /var/www/html/.well-known/;
        allow all;
    }


&lt;p&gt;Then to enable http2 for each of the vhosts add the keyword at the top of your server block where your listen is:&lt;/p&gt;


    listen 443 ssl http2;


&lt;h1 id=&#34;welcome-to-the-future&#34;&gt;Welcome to the future!&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Setting up a hugo based website on ubuntu then auto deploy using gogs&#39; webhooks</title>
      <link>https://plod.tv/post/Setting-up-hugo-git-auto-deploy/</link>
      <pubDate>Thu, 18 Feb 2016 12:29:13 +0000</pubDate>
      
      <guid>https://plod.tv/post/Setting-up-hugo-git-auto-deploy/</guid>
      <description>

&lt;h2 id=&#34;what-is-hugo&#34;&gt;What is Hugo?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Hugo is a static HTML and CSS website generator written in Go. It is optimized for speed, easy use and configurability. Hugo takes a directory with content and templates and renders them into a full HTML website.&lt;/p&gt;

&lt;p&gt;Hugo relies on Markdown files with front matter for meta data. And you can run Hugo from any directory. This works well for shared hosts and other systems where you don‚Äôt have a privileged account.&lt;/p&gt;

&lt;p&gt;Hugo renders a typical website of moderate size in a fraction of a second. A good rule of thumb is that each piece of content renders in around 1 millisecond.&lt;/p&gt;

&lt;p&gt;Hugo is designed to work well for any kind of website including blogs, tumbles and docs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;https://gohugo.io/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;what-is-gogs&#34;&gt;What is Gogs?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The goal of this project is to make the easiest, fastest, and most painless way of setting up a self-hosted Git service. With Go, this can be done with an independent binary distribution across ALL platforms that Go supports, including Linux, Mac OS X, Windows and ARM.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://gogs.io/&#34;&gt;https://gogs.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is a great self hosting github/gitlabs sort of project but coded in go.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I started by following &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-hugo-a-static-site-generator-on-ubuntu-14-04&#34;&gt;this digital ocean tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I didn&amp;rsquo;t want to use a package, my preference was to compile from &lt;a href=&#34;https://gohugo.io/overview/installing/&#34;&gt;source&lt;/a&gt;. However I got the following error while trying that:

go: missing Mercurial command. See https://golang.org/s/gogetcmd
package bitbucket.org/pkg/inflect: exec: &#34;hg&#34;: executable file not found in $PATH

Thanks to &lt;a href=&#34;http://kaiq.me/2015/12/23/go/go-get-tools/&#34;&gt;this&lt;/a&gt; and google translate I realised Mercurial was a dependancy.&lt;/p&gt;

&lt;p&gt;so

sudo apt-get install mercurial

and then&lt;/p&gt;


go get -u -v github.com/spf13/hugo


&lt;p&gt;got me cooking!&lt;/p&gt;

&lt;p&gt;In the DO tutorial it says to run&lt;/p&gt;


sudo hugo genautocomplete


&lt;p&gt;this seems to be factored out to&lt;/p&gt;


sudo hugo gen autocomplete


&lt;p&gt;but because I compiled from source hugo isn&amp;rsquo;t in sudo environment path so&lt;/p&gt;


sudo ~/go-workspace/bin/hugo gen autocomplete


&lt;p&gt;[~/go-workspace is my $GOPATH so change to yours]&lt;/p&gt;

&lt;p&gt;While cloning the themes I decided hugo-themes was a better name for the directory in my home dir (themes could be anything while browsing later), of course this meant later, my symlink would need to look like:&lt;/p&gt;


 ln -s ../hugo-themes/ themes


&lt;p&gt;It seems that some other switches are different from the DO tutorial (-themes= in git cloned version is -t )&lt;/p&gt;

&lt;h1 id=&#34;auto-deploy&#34;&gt;Auto deploy&lt;/h1&gt;

&lt;p&gt;This is based on the digital ocean tutorial &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-deploy-a-hugo-site-to-production-with-git-hooks-on-ubuntu-14-04&#34;&gt;here&lt;/a&gt; the difference however was, is I use gogs, the server itself has no firewall access to my gogs server. I decided to solve this problem using the tutorial/gogs&amp;rsquo; web hooks/and a little php (that I&amp;rsquo;m sure I&amp;rsquo;ll refactor as go at some stage)&lt;/p&gt;

&lt;p&gt;First of all lets set up the gogs web hook:&lt;/p&gt;

&lt;p&gt;Inside the repository in question click on the settings link on the right hand side&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://plod.tv/img/post-img/gogs-settings.png&#34; alt=&#34;Gogs Settings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then click on the Webhooks link on the left hand side&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://plod.tv/img/post-img/gogs-webhooks.png&#34; alt=&#34;Gogs Webhooks&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally enter a url the gogs server can connect to and that you can write php on (make a note of the Secret that you use)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://plod.tv/img/post-img/gogs-webhook.png&#34; alt=&#34;Gogs Webhook&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now the php that runs at the URL you entered above should look a little something like this.&lt;/p&gt;


&lt;?php
//gogs secret for web hook
$secret   = &#34;&#34;;

//keyword you are looking for in commit message to decide if to desploy
$deployCommitKeyword = &#34;[deploy] &#34;;
$json = (array) json_decode(file_get_contents(&#39;php://input&#39;));

if(array_key_exists(&#39;secret&#39;, $json)&amp;&amp;($json[&#39;secret&#39;]==$secret)){
    echo &#39;secret matched&#39;;
    if(array_key_exists(&#39;commits&#39;, $json)){
        for($i=0, $j=count($json[&#39;commits&#39;]); $i&lt;$j; $i++){
            $json[&#39;commits&#39;][$i] = (array) $json[&#39;commits&#39;][$i];
            if(array_key_exists(&#39;message&#39;, $json[&#39;commits&#39;][$i])&amp;&amp;(strstr($json[&#39;commits&#39;][$i][&#39;message&#39;], $deployCommitKeyword))){
                do_deploy();
                break;
            }
    }
}

function do_deploy(){
    $GIT_REPO           = &#34;$HOME/my-website.git&#34;;
    $WORKING_DIRECTORY  = &#34;$HOME/my-website-working&#34;;
    $REMOTE_BACKUP_HTML = &#34;backup_html/&#34;;
    $REMOTE_PUBLIC_HTML = &#34;public_html/&#34;;
    $MY_SERVER_IP       = &#34;server_domain_or_IP
1&#34;;
 
    if(!is_dir($WORKING_DIRECTORY)){
        $command = &#34;git clone $GIT_REPO $WORKING_DIRECTORY&#34;;
        echo `$command`;
    }else{
        $command = &#34;cd $WORKING_DIRECTORY; git pull&#34;;
        echo `$command`;
    }
    $command = &#34;cd $WORKING_DIRECTORY; /path/to/hugo&#34;;
    echo `$command`;
    //lets rsync a copy of the working directory to backup
    $command = &#34;ssh $MY_SERVER_IP rsync -r $REMOTE_PUBLIC_HTML $REMOTE_BACKUP_HTML&#34;;
    echo `$command`;
    $command = &#34;rsync -r $WORKING_DIRECTORY/public/ $MY_SERVER_IP:$REMOTE_PUBLIC_HTML&#34;;
    echo `$command`;
}


&lt;p&gt;&lt;em&gt;*update&lt;/em&gt; I noticed that syntax hilighting was going missing on this post (turned out that pygmatize was not in path of the php process) (php runs as my user account) so I fixed this by changing&lt;/p&gt;


$command = &#34;cd $WORKING_DIRECTORY; /path/to/hugo&#34;;
echo `$command`;


&lt;p&gt;to&lt;/p&gt;


$command = &#34;cd $WORKING_DIRECTORY; export PATH=\&#34;What my $PATH is at tty\&#34; hugo&#34;;
echo `$command`;


&lt;p&gt;This felt a little dirty but after many attempts at a more elegent solution, I have stayed with this for the time being.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://plod.tv/post/My-First-Post/</link>
      <pubDate>Thu, 18 Feb 2016 12:12:49 +0000</pubDate>
      
      <guid>https://plod.tv/post/My-First-Post/</guid>
      <description>

&lt;p&gt;This is my first post on the site.  I hope that you like it!&lt;/p&gt;

&lt;h2 id=&#34;welcome-function&#34;&gt;Welcome Function&lt;/h2&gt;

&lt;p&gt;Here is a little Golang function to welcome you:&lt;/p&gt;


package main

import &#34;fmt&#34;

func main() {
	fmt.Println(&#34;Sut mae, byd!&#34;)
}

</description>
    </item>
    
  </channel>
</rss>